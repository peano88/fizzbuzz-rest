// Code generated by mockery v2.25.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/peano88/fizzbuzz-rest/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// FizzBuzzStats is an autogenerated mock type for the FizzBuzzStats type
type FizzBuzzStats struct {
	mock.Mock
}

// Increment provides a mock function with given fields: ctx, n, m, top, fizz, buzz
func (_m *FizzBuzzStats) Increment(ctx context.Context, n int, m int, top int, fizz string, buzz string) error {
	ret := _m.Called(ctx, n, m, top, fizz, buzz)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, string, string) error); ok {
		r0 = rf(ctx, n, m, top, fizz, buzz)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stats provides a mock function with given fields: ctx
func (_m *FizzBuzzStats) Stats(ctx context.Context) (model.FizzBuzzStatisticsOutput, error) {
	ret := _m.Called(ctx)

	var r0 model.FizzBuzzStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.FizzBuzzStatisticsOutput, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.FizzBuzzStatisticsOutput); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.FizzBuzzStatisticsOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFizzBuzzStats interface {
	mock.TestingT
	Cleanup(func())
}

// NewFizzBuzzStats creates a new instance of FizzBuzzStats. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFizzBuzzStats(t mockConstructorTestingTNewFizzBuzzStats) *FizzBuzzStats {
	mock := &FizzBuzzStats{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
